Index: Homework/Kyusik/RxStudy/app/src/main/res/layout/activity_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:padding=\"30dp\"\n    tools:context=\".MainActivity\">\n\n    <TextView\n        android:id=\"@+id/tv_opacity_title\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/first_week_observer_pattern_opacity_title\"\n        android:textSize=\"13sp\"\n        app:layout_constraintBottom_toBottomOf=\"@id/et_percent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"@id/et_percent\" />\n\n    <com.rxstudy.customui.PercentEditText\n        android:id=\"@+id/et_percent\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginStart=\"30dp\"\n        android:hint=\"@string/first_week_observer_pattern_opacity_hint\"\n        android:inputType=\"number\"\n        android:textSize=\"13sp\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toEndOf=\"@id/tv_opacity_title\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n    <TextView\n        android:id=\"@+id/tv_opacity_seek_bar_title\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"30dp\"\n        android:text=\"@string/first_week_observer_pattern_opacity_seek_bar_title\"\n        android:textSize=\"13sp\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@id/et_percent\" />\n\n    <com.rxstudy.customui.PercentSeekBar\n        android:id=\"@+id/sb_percent\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        app:layout_constraintBottom_toBottomOf=\"@id/tv_opacity_seek_bar_title\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toEndOf=\"@id/tv_opacity_seek_bar_title\"\n        app:layout_constraintTop_toTopOf=\"@id/tv_opacity_seek_bar_title\" />\n\n    <com.rxstudy.customui.PercentImageView\n        android:id=\"@+id/img_opacity_result\"\n        android:layout_width=\"30dp\"\n        android:layout_height=\"30dp\"\n        android:layout_marginTop=\"30dp\"\n        android:background=\"@color/black\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@id/sb_percent\" />\n\n    <com.rxstudy.customui.PercentTextView\n        android:id=\"@+id/tv_percent\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginStart=\"30dp\"\n        android:textSize=\"13sp\"\n        app:layout_constraintBottom_toBottomOf=\"@id/img_opacity_result\"\n        app:layout_constraintStart_toEndOf=\"@id/img_opacity_result\"\n        app:layout_constraintTop_toTopOf=\"@id/img_opacity_result\" />\n\n\n    <TextView\n        android:id=\"@+id/tv_graph_title\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"30dp\"\n        android:text=\"@string/graph_title\"\n        android:textSize=\"13sp\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/img_opacity_result\" />\n\n    <com.rxstudy.customui.GraphEditText\n        android:id=\"@+id/et_graph\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginStart=\"30dp\"\n        android:hint=\"@string/graph_hint\"\n        android:inputType=\"number\"\n        android:textSize=\"13sp\"\n        app:layout_constraintBottom_toBottomOf=\"@+id/tv_graph_title\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toEndOf=\"@id/tv_graph_title\"\n        app:layout_constraintTop_toTopOf=\"@+id/tv_graph_title\" />\n\n    <androidx.constraintlayout.widget.ConstraintLayout\n        android:id=\"@+id/bar_container\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"30dp\"\n        android:background=\"@drawable/graph_bar_container\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/et_graph\">\n\n        <com.rxstudy.customui.GraphImageView\n            android:id=\"@+id/img_graph\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"10dp\"\n            android:layout_marginVertical=\"10dp\"\n            android:background=\"@drawable/graph_bar_mango\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\" />\n    </androidx.constraintlayout.widget.ConstraintLayout>\n\n    <com.rxstudy.customui.GraphTextView\n        android:id=\"@+id/tv_graph\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:textSize=\"13sp\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/bar_container\" />\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"0dp\"\n        android:orientation=\"vertical\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/tv_graph\">\n\n        <Button\n            android:id=\"@+id/bt_publish_subject\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"publish subject\" />\n\n        <Button\n            android:id=\"@+id/bt_behavior_subject\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Behavior Subject \" />\n\n        <Button\n            android:id=\"@+id/bt_async_subject\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Async Subject \" />\n\n        <Button\n            android:id=\"@+id/bt_replay_subject\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Replay Subject\" />\n    </LinearLayout>\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Homework/Kyusik/RxStudy/app/src/main/res/layout/activity_main.xml b/Homework/Kyusik/RxStudy/app/src/main/res/layout/activity_main.xml
--- a/Homework/Kyusik/RxStudy/app/src/main/res/layout/activity_main.xml	
+++ b/Homework/Kyusik/RxStudy/app/src/main/res/layout/activity_main.xml	
@@ -120,37 +120,34 @@
         app:layout_constraintEnd_toEndOf="parent"
         app:layout_constraintTop_toBottomOf="@+id/bar_container" />
 
-    <LinearLayout
+    <RadioGroup
+        android:id="@+id/rg_graph"
         android:layout_width="match_parent"
-        android:layout_height="0dp"
-        android:orientation="vertical"
-        app:layout_constraintBottom_toBottomOf="parent"
-        app:layout_constraintEnd_toEndOf="parent"
+        android:layout_height="wrap_content"
+        android:layout_marginTop="20dp"
+        android:orientation="horizontal"
+        android:gravity="center"
         app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
         app:layout_constraintTop_toBottomOf="@+id/tv_graph">
 
-        <Button
-            android:id="@+id/bt_publish_subject"
-            android:layout_width="match_parent"
+        <RadioButton
+            android:id="@+id/rb_1"
+            android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:text="publish subject" />
+            android:clickable="false"
+            android:text="1 - 50"/>
 
-        <Button
-            android:id="@+id/bt_behavior_subject"
-            android:layout_width="match_parent"
+        <View
+            android:layout_width="0dp"
+            android:layout_height="0dp"
+            android:layout_weight="1"/>
+
+        <RadioButton
+            android:id="@+id/rb_2"
+            android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:text="Behavior Subject " />
-
-        <Button
-            android:id="@+id/bt_async_subject"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:text="Async Subject " />
-
-        <Button
-            android:id="@+id/bt_replay_subject"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:text="Replay Subject" />
-    </LinearLayout>
+            android:clickable="false"
+            android:text="51 - 100"/>
+    </RadioGroup>
 </androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: Homework/Kyusik/RxStudy/app/src/main/java/com/rxstudy/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.rxstudy\n\nimport android.os.Bundle\nimport android.util.Log\nimport android.widget.Button\nimport androidx.appcompat.app.AppCompatActivity\nimport com.rxstudy.customui.*\nimport io.reactivex.*\nimport io.reactivex.android.schedulers.AndroidSchedulers\nimport io.reactivex.disposables.CompositeDisposable\nimport io.reactivex.schedulers.Schedulers\nimport io.reactivex.subjects.AsyncSubject\nimport io.reactivex.subjects.BehaviorSubject\nimport io.reactivex.subjects.PublishSubject\nimport io.reactivex.subjects.ReplaySubject\n\nclass MainActivity : AppCompatActivity() {\n    private lateinit var etPercent: PercentEditText\n    private lateinit var sbPercent: PercentSeekBar\n    private lateinit var tvPercent: PercentTextView\n    private lateinit var imgOpacityResult: PercentImageView\n\n    private lateinit var etGraph: GraphEditText\n    private lateinit var imageGraph: GraphImageView\n    private lateinit var tvGraph: GraphTextView\n\n    private val compositeDisposable = CompositeDisposable()\n\n    private lateinit var publishSubject: Button\n    private lateinit var behaviorSubject: Button\n    private lateinit var asyncSubject: Button\n    private lateinit var replaySubject: Button\n\n    private fun threadLog(message: String) {\n        Log.d(TAG, \"thread name = ${Thread.currentThread().name} / message = $message\")\n    }\n\n    private fun startTaskToGetFirstString(): String = \"1\".also { threadLog(\"Start task to emit $it\") }\n    private fun startTaskToGetSecondString(): String = \"2\".also { threadLog(\"Start task to emit $it\") }\n    private fun startTaskToGetThirdString(): String = \"3\".also { threadLog(\"Start task to emit $it\") }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        etPercent = findViewById(R.id.et_percent)\n        sbPercent = findViewById(R.id.sb_percent)\n        tvPercent = findViewById(R.id.tv_percent)\n        imgOpacityResult = findViewById(R.id.img_opacity_result)\n\n        etGraph = findViewById(R.id.et_graph)\n        imageGraph = findViewById(R.id.img_graph)\n        tvGraph = findViewById(R.id.tv_graph)\n\n        publishSubject = findViewById(R.id.bt_publish_subject)\n        behaviorSubject = findViewById(R.id.bt_behavior_subject)\n        asyncSubject = findViewById(R.id.bt_async_subject)\n        replaySubject = findViewById(R.id.bt_replay_subject)\n\n        publishSubject.setOnClickListener {\n            runPublishSubjectEventExample()\n        }\n\n        behaviorSubject.setOnClickListener {\n            runBehaviorSubjectEventExample()\n        }\n\n        asyncSubject.setOnClickListener {\n            runAsyncSubjectEventExample()\n        }\n\n        replaySubject.setOnClickListener {\n            runReplaySubjectEventExample()\n        }\n\n       /*compositeDisposable.add(\n            Observable\n                .just(\"Observable just\")\n                .subscribeOn(Schedulers.io())\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribe({ data: String ->\n                    Log.e(\"Observable\", \"onNext: $data\")\n                }, { throwable: Throwable ->\n                    Log.e(\"Observable\", \"onError: $throwable\")\n                }, {\n                    Log.e(\"Observable\", \"onComplete\")\n                })\n        )\n        compositeDisposable.add(\n            Single\n                .just(\"Single just\")\n                .subscribeOn(Schedulers.io())\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribe({\n                    Log.e(\"Single\", \"onSuccess $it\")\n                }, {\n                    it.printStackTrace()\n                    Log.e(\"Single\", \"onError\")\n                })\n        )\n        compositeDisposable.add(\n            Flowable\n                .just(\"Flowable just\")\n                .subscribeOn(Schedulers.io())\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribe({ data: String ->\n                    Log.e(\"Flowable\", \"onNext: $data\")\n                }, { throwable: Throwable ->\n                    Log.e(\"Flowable\", \"onError: $throwable\")\n                }, {\n                    Log.e(\"Flowable\", \"onComplete\")\n                })\n        )\n        compositeDisposable.add(\n            Maybe\n                .just(\"Maybe just\")\n                .subscribeOn(Schedulers.io())\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribe({ data: String ->\n                    Log.e(\"Maybe\", \"onSuccess: $data\")\n                }, { throwable: Throwable ->\n                    Log.e(\"Maybe\", \"onError: $throwable\")\n                }, {\n                    Log.e(\"Maybe\", \"onComplete\")\n                })\n        )\n        compositeDisposable.add(\n            Completable\n                .create {\n                    it.onError(Error())\n                    it.onComplete()\n                }\n                .subscribeOn(Schedulers.io())\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribe({\n                    Log.e(\"Completable\", \"onComplete\")\n                }, {\n                    it.printStackTrace()\n                    Log.e(\"Completable\", \"onError\")\n                })\n        )*/\n    }\n\n    private fun runPublishSubjectEventExample() {\n        val publishSubject = PublishSubject.create<String>()\n\n        compositeDisposable.add(\n            publishSubject\n                .subscribe({\n                    threadLog(\"$it in first subscribe\")\n                }, { it.printStackTrace() })\n        )\n        publishSubject.onNext(startTaskToGetFirstString())\n        publishSubject.onNext(startTaskToGetSecondString())\n\n        threadLog(\"--------구분선--------\")\n\n        compositeDisposable.add(\n            publishSubject\n                .subscribe({\n                    threadLog(\"$it in second subscribe\")\n                }, { it.printStackTrace() })\n        )\n\n        publishSubject.onNext(startTaskToGetThirdString())\n        publishSubject.onError(Throwable(\"Throw Error\"))\n//        publishSubject.onComplete()\n    }\n\n    private fun runBehaviorSubjectEventExample() {\n//        val behaviorSubject = BehaviorSubject.create<String>()\n        val behaviorSubject = BehaviorSubject.createDefault(\"default\")\n\n        compositeDisposable.add(\n            behaviorSubject\n                .subscribe({\n                    threadLog(\"$it in first subscribe\")\n                }, { it.printStackTrace() })\n        )\n        behaviorSubject.onNext(startTaskToGetFirstString())\n        behaviorSubject.onNext(startTaskToGetSecondString())\n        behaviorSubject.onError(Throwable(\"Throw Error\"))\n\n        threadLog(\"--------구분선--------\")\n\n        compositeDisposable.add(\n            behaviorSubject\n                .subscribe({\n                    threadLog(\"$it in second subscribe\")\n                }, { it.printStackTrace() })\n        )\n\n        behaviorSubject.onNext(startTaskToGetThirdString())\n        behaviorSubject.onComplete()\n    }\n\n    private fun runAsyncSubjectEventExample() {\n        val asyncSubject = AsyncSubject.create<String>()\n\n        compositeDisposable.add(\n            asyncSubject\n                .subscribe({\n                    threadLog(\"$it in first subscribe\")\n                }, { it.printStackTrace() })\n        )\n        asyncSubject.onNext(startTaskToGetFirstString())\n        asyncSubject.onNext(startTaskToGetSecondString())\n\n        threadLog(\"--------구분선--------\")\n\n        compositeDisposable.add(\n            asyncSubject\n                .subscribe({\n                    threadLog(\"$it in second subscribe\")\n                }, { it.printStackTrace() })\n        )\n\n        asyncSubject.onNext(startTaskToGetThirdString())\n        asyncSubject.onError(Throwable(\"Throw Error\"))\n//        asyncSubject.onComplete()\n    }\n\n    private fun runReplaySubjectEventExample() {\n        val replaySubject = ReplaySubject.createWithSize<String>(2)\n\n        compositeDisposable.add(\n            replaySubject\n                .subscribe({\n                    threadLog(\"$it in first subscribe\")\n                }, { it.printStackTrace() })\n        )\n\n        replaySubject.onNext(startTaskToGetFirstString())\n        replaySubject.onNext(startTaskToGetSecondString())\n\n        threadLog(\"--------구분선--------\")\n\n        compositeDisposable.add(\n            replaySubject\n                .subscribe({\n                    threadLog(\"$it in second subscribe\")\n                }, { it.printStackTrace() })\n        )\n\n        replaySubject.onNext(startTaskToGetThirdString())\n        replaySubject.onError(Throwable(\"Throw Error\"))\n//        replaySubject.onComplete()\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        compositeDisposable.dispose()\n    }\n\n    companion object {\n        private const val TAG = \"MainActivity\"\n        val progressSubject = MySubject<Int>()\n        val graphSubject = MySubject<Int>()\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Homework/Kyusik/RxStudy/app/src/main/java/com/rxstudy/MainActivity.kt b/Homework/Kyusik/RxStudy/app/src/main/java/com/rxstudy/MainActivity.kt
--- a/Homework/Kyusik/RxStudy/app/src/main/java/com/rxstudy/MainActivity.kt	
+++ b/Homework/Kyusik/RxStudy/app/src/main/java/com/rxstudy/MainActivity.kt	
@@ -1,20 +1,12 @@
 package com.rxstudy
 
 import android.os.Bundle
-import android.util.Log
-import android.widget.Button
+import android.widget.RadioButton
+import android.widget.RadioGroup
 import androidx.appcompat.app.AppCompatActivity
 import com.rxstudy.customui.*
-import io.reactivex.*
-import io.reactivex.android.schedulers.AndroidSchedulers
-import io.reactivex.disposables.CompositeDisposable
-import io.reactivex.schedulers.Schedulers
-import io.reactivex.subjects.AsyncSubject
-import io.reactivex.subjects.BehaviorSubject
-import io.reactivex.subjects.PublishSubject
-import io.reactivex.subjects.ReplaySubject
 
-class MainActivity : AppCompatActivity() {
+class MainActivity : AppCompatActivity(), MyObserver<Int> {
     private lateinit var etPercent: PercentEditText
     private lateinit var sbPercent: PercentSeekBar
     private lateinit var tvPercent: PercentTextView
@@ -23,21 +15,9 @@
     private lateinit var etGraph: GraphEditText
     private lateinit var imageGraph: GraphImageView
     private lateinit var tvGraph: GraphTextView
-
-    private val compositeDisposable = CompositeDisposable()
-
-    private lateinit var publishSubject: Button
-    private lateinit var behaviorSubject: Button
-    private lateinit var asyncSubject: Button
-    private lateinit var replaySubject: Button
-
-    private fun threadLog(message: String) {
-        Log.d(TAG, "thread name = ${Thread.currentThread().name} / message = $message")
-    }
-
-    private fun startTaskToGetFirstString(): String = "1".also { threadLog("Start task to emit $it") }
-    private fun startTaskToGetSecondString(): String = "2".also { threadLog("Start task to emit $it") }
-    private fun startTaskToGetThirdString(): String = "3".also { threadLog("Start task to emit $it") }
+    private lateinit var rgGraph: RadioGroup
+    private lateinit var rb1: RadioButton
+    private lateinit var rb2: RadioButton
 
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
@@ -51,209 +31,32 @@
         etGraph = findViewById(R.id.et_graph)
         imageGraph = findViewById(R.id.img_graph)
         tvGraph = findViewById(R.id.tv_graph)
+        rgGraph = findViewById(R.id.rg_graph)
+        rb1 = findViewById(R.id.rb_1)
+        rb2 = findViewById(R.id.rb_2)
 
-        publishSubject = findViewById(R.id.bt_publish_subject)
-        behaviorSubject = findViewById(R.id.bt_behavior_subject)
-        asyncSubject = findViewById(R.id.bt_async_subject)
-        replaySubject = findViewById(R.id.bt_replay_subject)
+        graphSubject.subscribe(this)
 
-        publishSubject.setOnClickListener {
-            runPublishSubjectEventExample()
-        }
+    }
 
-        behaviorSubject.setOnClickListener {
-            runBehaviorSubjectEventExample()
-        }
-
-        asyncSubject.setOnClickListener {
-            runAsyncSubjectEventExample()
-        }
-
-        replaySubject.setOnClickListener {
-            runReplaySubjectEventExample()
-        }
-
-       /*compositeDisposable.add(
-            Observable
-                .just("Observable just")
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe({ data: String ->
-                    Log.e("Observable", "onNext: $data")
-                }, { throwable: Throwable ->
-                    Log.e("Observable", "onError: $throwable")
-                }, {
-                    Log.e("Observable", "onComplete")
-                })
-        )
-        compositeDisposable.add(
-            Single
-                .just("Single just")
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe({
-                    Log.e("Single", "onSuccess $it")
-                }, {
-                    it.printStackTrace()
-                    Log.e("Single", "onError")
-                })
-        )
-        compositeDisposable.add(
-            Flowable
-                .just("Flowable just")
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe({ data: String ->
-                    Log.e("Flowable", "onNext: $data")
-                }, { throwable: Throwable ->
-                    Log.e("Flowable", "onError: $throwable")
-                }, {
-                    Log.e("Flowable", "onComplete")
-                })
-        )
-        compositeDisposable.add(
-            Maybe
-                .just("Maybe just")
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe({ data: String ->
-                    Log.e("Maybe", "onSuccess: $data")
-                }, { throwable: Throwable ->
-                    Log.e("Maybe", "onError: $throwable")
-                }, {
-                    Log.e("Maybe", "onComplete")
-                })
-        )
-        compositeDisposable.add(
-            Completable
-                .create {
-                    it.onError(Error())
-                    it.onComplete()
+    override fun notifyDataIsArrived(value: Int?) {
+        value?.let {
+            when (it) {
+                in 1..50 -> {
+                    rb1.isChecked = true
+                }
+                in 51..100 -> {
+                    rb2.isChecked = true
+                }
+                else -> {
+                    rb1.isChecked = false
+                    rb2.isChecked = false
                 }
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe({
-                    Log.e("Completable", "onComplete")
-                }, {
-                    it.printStackTrace()
-                    Log.e("Completable", "onError")
-                })
-        )*/
-    }
-
-    private fun runPublishSubjectEventExample() {
-        val publishSubject = PublishSubject.create<String>()
-
-        compositeDisposable.add(
-            publishSubject
-                .subscribe({
-                    threadLog("$it in first subscribe")
-                }, { it.printStackTrace() })
-        )
-        publishSubject.onNext(startTaskToGetFirstString())
-        publishSubject.onNext(startTaskToGetSecondString())
-
-        threadLog("--------구분선--------")
-
-        compositeDisposable.add(
-            publishSubject
-                .subscribe({
-                    threadLog("$it in second subscribe")
-                }, { it.printStackTrace() })
-        )
-
-        publishSubject.onNext(startTaskToGetThirdString())
-        publishSubject.onError(Throwable("Throw Error"))
-//        publishSubject.onComplete()
-    }
-
-    private fun runBehaviorSubjectEventExample() {
-//        val behaviorSubject = BehaviorSubject.create<String>()
-        val behaviorSubject = BehaviorSubject.createDefault("default")
-
-        compositeDisposable.add(
-            behaviorSubject
-                .subscribe({
-                    threadLog("$it in first subscribe")
-                }, { it.printStackTrace() })
-        )
-        behaviorSubject.onNext(startTaskToGetFirstString())
-        behaviorSubject.onNext(startTaskToGetSecondString())
-        behaviorSubject.onError(Throwable("Throw Error"))
-
-        threadLog("--------구분선--------")
-
-        compositeDisposable.add(
-            behaviorSubject
-                .subscribe({
-                    threadLog("$it in second subscribe")
-                }, { it.printStackTrace() })
-        )
-
-        behaviorSubject.onNext(startTaskToGetThirdString())
-        behaviorSubject.onComplete()
+            }
+        }
     }
-
-    private fun runAsyncSubjectEventExample() {
-        val asyncSubject = AsyncSubject.create<String>()
-
-        compositeDisposable.add(
-            asyncSubject
-                .subscribe({
-                    threadLog("$it in first subscribe")
-                }, { it.printStackTrace() })
-        )
-        asyncSubject.onNext(startTaskToGetFirstString())
-        asyncSubject.onNext(startTaskToGetSecondString())
-
-        threadLog("--------구분선--------")
-
-        compositeDisposable.add(
-            asyncSubject
-                .subscribe({
-                    threadLog("$it in second subscribe")
-                }, { it.printStackTrace() })
-        )
-
-        asyncSubject.onNext(startTaskToGetThirdString())
-        asyncSubject.onError(Throwable("Throw Error"))
-//        asyncSubject.onComplete()
-    }
-
-    private fun runReplaySubjectEventExample() {
-        val replaySubject = ReplaySubject.createWithSize<String>(2)
-
-        compositeDisposable.add(
-            replaySubject
-                .subscribe({
-                    threadLog("$it in first subscribe")
-                }, { it.printStackTrace() })
-        )
-
-        replaySubject.onNext(startTaskToGetFirstString())
-        replaySubject.onNext(startTaskToGetSecondString())
-
-        threadLog("--------구분선--------")
-
-        compositeDisposable.add(
-            replaySubject
-                .subscribe({
-                    threadLog("$it in second subscribe")
-                }, { it.printStackTrace() })
-        )
-
-        replaySubject.onNext(startTaskToGetThirdString())
-        replaySubject.onError(Throwable("Throw Error"))
-//        replaySubject.onComplete()
-    }
-
-    override fun onDestroy() {
-        super.onDestroy()
-        compositeDisposable.dispose()
-    }
 
     companion object {
-        private const val TAG = "MainActivity"
         val progressSubject = MySubject<Int>()
         val graphSubject = MySubject<Int>()
     }
